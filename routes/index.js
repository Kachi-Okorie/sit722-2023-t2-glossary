var express = require('express');
var router = express.Router();

const nameList = [
  { 'id': 1, 'Term': 'DevOps', 'Description': "DevOps makes it possible for formerly separate tasks like development, IT operations, quality engineering, and security to coordinate and collaborate. It unifies people, process, and technology in application design, development, delivery, and operations by combining development (Dev) and operations (Ops)", 'References': "mijacobs (2023). What is DevOps? - Azure DevOps. [online] learn.microsoft.com. Available at: https://learn.microsoft.com/en-us/devops/what-is-devops" },
  {'id': 2, 'Term': 'Agile', 'Description': 'Agile is a project management methodology that emphasises incremental and iterative project completion phases. Instead of top-down administration and adhering to a predetermined plan, the strategy places a higher priority on speedy delivery, flexibility, and cooperation.', 'References': 'Coursera. (2023). What Is Agile? And When to Use It. [online] Available at: https://www.coursera.org/articles/what-is-agile-a-beginners-guide' },
  {'id': 3, 'Term': 'Cloud Computing', 'Description': 'The term "cloud computing" refers to an abstraction of the network, storage, and compute resources that have been put together as a platform for the deployment and scalability of software and hardware. Most cloud users use public cloud services over the internet, which are hosted in distant data centres that are managed by cloud  providers.', 'References': 'Knorr, E. (2018). What is cloud computing? Everything you need to know now. [online] InfoWorld. Available at: https://www.infoworld.com/article/2683784/what-is-cloud-computing.html'},
  {'id': 4, 'Term': 'Microservices', 'Description': 'One of the key components of cloud-native computing are microservices. It splits large applications into smaller, loosely linked pieces, facilitating the development of flexible and robust software by developers. Additionally, the shorter development cycles that microservices enable speed up innovation and improve user experience.', 'References': 'Chris Tozzi (2022). An intro to cloud-native microservices and how to build them | TechTarget. [online] Available at: https://www.techtarget.com/searchapparchitecture/tip/An-intro-to-cloud-native-microservices-and-how-to-build-them'},
  {'id': 5, 'Term': 'Monolith Architecture', 'Description': 'In a monolithic architecture, the operating system kernel is created to offer all operating system functions in a single, massive binary, including memory management, process scheduling, device drivers, and file systems. As a result, all code executes in kernel space, with no distinction between kernel-level and user-level processes.', 'References': 'GeeksforGeeks. (2020). Monolithic Architecture. [online] Available at: https://www.geeksforgeeks.org/monolithic-architecture/'},
  {'id': 6, 'Term': 'Orchestration', 'Description': 'In a centralised approach known as orchestration, a central component known as the orchestrator is in charge of overseeing and directing interactions amongst microservices. Examples of orchestration tools are Kubernetes and Docker Swarm.', 'References': 'Kanjilal, J. (2023). Orchestration and choreography in .NET microservices. [online] InfoWorld. Available at: https://www.infoworld.com/article/3687638/orchestration-and-choreography-in-net-microservices.html#:~:text=Microservices%20orchestration%20refers%20to%20a'},
  {'id': 7, 'Term': 'Automation', 'Description': 'IT departments and developers can automatically set up, change, and remove cloud resources thanks to cloud automation. Cloud automation is not a feature of the cloud; rather, it requires knowledge and the usage of specialised tools. Some automation tools include, puppet, ansible, kubernetes, AWS cloud formation, and so on.', 'References': 'Perry, Y. (2019). Cloud Automation: Why, Where and How. [online] bluexp.netapp.com. Available at: https://bluexp.netapp.com/blog/cloud-automation-why-where-and-how-cvo-blg#H4_4'},
  {'id': 8, 'Term': 'Docker', 'Description': 'A software platform called Docker makes it simple to develop, test, and deploy applications. Software is packaged by Docker into standardised units called containers that contain all of the necessary code, libraries, system tools, and runtime.', 'References': 'Amazon Web Services, Inc. (n.d.). What is Docker? | AWS. [online] Available at: https://aws.amazon.com/docker/#:~:text=Docker%20is%20a%20software%20platform'},
  {'id': 9, 'Term': 'Kubernetes', 'Description': 'A portable, adaptable, open-source platform called Kubernetes allows for declarative setup and automation of containerized workloads and services. You can use Kubernetes for things like storage orchestration, service discovery and load balancing.', 'References': 'Kubernetes. (2023). Overview. [online] Available at: https://kubernetes.io/docs/concepts/overview/'},
  {'id': 10, 'Term': 'Terraform', 'Description': 'In order to automate numerous infrastructure activities, DevOps teams frequently employ Terraform, an infrastructure as code tool. One of Terraforms primary use cases is the provisioning of cloud resources. It is an open-source provisioning tool written in the Go language.', 'References': 'Harrington, D. (2023). What is Terraform: Everything You Need to Know | Varonis. [online] www.varonis.com. Available at: https://www.varonis.com/blog/what-is-terraform'},
  { 'id': 11, 'Term': 'Staging Environment', 'Description': "Before deploying an application, staging environments are designed to test codes, builds, and updates to guarantee quality in a setting similar to a production environment. The same hardware, server, database, and cache configurations must be duplicated for the staging environment.", 'References': "Gillis, A.S. (2018). What is staging environment? | Definition from TechTarget. [online] Software Quality. Available at: https://www.techtarget.com/searchsoftwarequality/definition/staging-environment#:~:text=Staging%20environments%20are%20made%20to [Accessed 26 Jul. 2023]." },
  {'id': 12, 'Term': 'Production Environment', 'Description': 'A real-time setting where software is used and hardware is deployed and relied upon for organisation or business everyday activities is referred to as a production environment. The product has been delivered and must operate flawlessly in the production setting.', 'References': 'Rouse, M. (2020). Production Environment. [online] Techopedia. Available at: https://www.techopedia.com/definition/8989/production-environment [Accessed 26 Jul. 2023].' },
  {'id': 13, 'Term': 'Software Build', 'Description': 'Both the process and the end product of your software development activities can be referred to as software builds. A build in software development is, in essence, the process by which engineers turn the source code into a working, independent programme that has executable code that can be used on a desktop computer or mobile device.', 'References': 'Khrupa, A. (2022). What is a Build in Software Development? | QArea Blog. [online] Software Development Company. Available at: https://qarea.com/blog/what-is-a-build-in-software-development [Accessed 26 Jul. 2023].'},
  {'id': 14, 'Term': 'Continuous Integration', 'Description': 'Continuous integration is always referred to as "CI" in CI/CD, and it is a method that automates development. A successful CI involves routinely building, testing, and merging new code changes to an app into a shared repository. It is a solution to the issue of having too many potentially incompatible branches of an app in development at once.', 'References': 'Redhat (2022). What is CI/CD? [online] Redhat.com. Available at: https://www.redhat.com/en/topics/devops/what-is-ci-cd.'},
  {'id': 15, 'Term': 'Continuous Delivery', 'Description': 'It often means that an operations team can deploy a developers changes to an active production environment once they have been automatically bug-tested and submitted to a repository. It provides a solution to the issue of the development and business teams limited visibility and communication.', 'References': 'Redhat (2022). What is CI/CD? [online] Redhat.com. Available at: https://www.redhat.com/en/topics/devops/what-is-ci-cd.'},
  {'id': 16, 'Term': 'Continuous Deployment', 'Description': 'It describes the process of automatically pushing a developers changes from the repository to the live environment, where users can access them. It deals with the issue of operations teams being overburdened with manual tasks that impede app delivery. By automating the following pipeline stage, it expands on the advantages of continuous delivery.', 'References': 'Redhat (2022). What is CI/CD? [online] Redhat.com. Available at: https://www.redhat.com/en/topics/devops/what-is-ci-cd.'},
  {'id': 17, 'Term': 'SCM', 'Description': 'Software Configuration Management (SCM) is a subfield of software engineering that offers a better method for addressing, planning, and managing changes to requirements, codes, teams, and other project-related components. Version control, recording changes, and selection of versions are the main concerns of SCM, which helps software projects be completed quickly and with the least amount of risk or error.', 'References': 'Pedamkar, P. (2023). Software Configuration Management | Complete Guide to SCM. [online] EDUCBA. Available at: https://www.educba.com/software-configuration-management/.'},
  {'id': 18, 'Term': 'GitHub', 'Description': 'A platform for online software development is called GitHub. It is employed for archiving, monitoring, and teamwork on software projects. Additionally, GitHub makes it simpler to keep track of changes and return to earlier iterations of a project. It makes it simple for developers to cooperate with one another on open-source projects and share code files.', 'References': 'Juviler, J. (2022). What Is GitHub? (And What Is It Used For?). [online] blog.hubspot.com. Available at: https://blog.hubspot.com/website/what-is-github-used-for.'},
  {'id': 19, 'Term': 'Acceptance Test', 'Description': 'A method of software testing called "acceptance testing" involves evaluating a systems acceptability. This tests main objective is to determine whether the system complies with business requirements and determine whether it is suitable for delivery.', 'References': 'pp_pankaj (2019). Acceptance testing | software testing - geeksforgeeks. [online] GeeksforGeeks. Available at: https://www.geeksforgeeks.org/acceptance-testing-software-testing/.'},
  {'id': 20, 'Term': 'CICD Pipeline', 'Description': 'The continuous integration/continuous delivery (CI/CD) pipeline is an agile DevOps workflow with the goal of delivering software on a regular basis with high reliability. DevOps teams may build code, integrate it, run tests, deliver releases, and distribute changes to the software collaboratively and in real-time thanks to the iterative, as opposed to linear, process.', 'References': 'IBM Cloud Education (2021). What Is the CI/CD Pipeline? [online] www.ibm.com. Available at: https://www.ibm.com/cloud/blog/ci-cd-pipeline.'},
  { 'id': 21, 'Term': 'Containerisation', 'Description': "Containerization is the process of packaging software code along with all of its necessary dependencies, including as libraries, frameworks, and other dependencies, into a single, isolated container. The purpose of this is to enable consistent movement and operation of the programme or application within the container in any environment and on any infrastructure, regardless of the operating system used by those environments or infrastructures.", 'References': "RedHat (2021) What is containerization?, www.redhat.com. Available at: https://www.redhat.com/en/topics/cloud-native-apps/what-is-containerization." },
  {'id': 22, 'Term': 'Infrastructure as Code', 'Description': 'Infrastructure as code (IaC) is a technique of defining and deploying infrastructure, such as networks, virtual machines, load balancers, and connection topologies, using the DevOps methodology and versioning with a descriptive model. An IaC model creates the same environment each time it is deployed, just as the same source code creates the same binary every time.', 'References': 'Microsoft (2022) What is infrastructure as code (IaC)? - Azure DevOps, learn.microsoft.com. Available at: https://learn.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code.' },
  {'id': 23, 'Term': 'Container Networking', 'Description': 'Container networking is a concept that tries to standardise and improve container data flows. In order to allow several containers to connect simultaneously and independently in an effective manner, container networks construct insulated zones.', 'References': 'Dilmegani, C. (2022) Container Networking in 2022: In-Depth Guide, research.aimultiple.com. Available at: https://research.aimultiple.com/container-networking/.'},
  {'id': 24, 'Term': 'Multiple Container Apps', 'Description': 'As an application grows, there would be a need to run some services in different containers. The ability to better isolate and maintain important services is made possible by dividing the application into multiple containers, which offers a more flexible and secure method of fleet management.', 'References': 'Balena (2023) Multiple containers - Balena Documentation, docs.balena.io. Available at: https://docs.balena.io/learn/develop/multicontainer/ (Accessed: 14 August 2023).'},
  {'id': 25, 'Term': 'Docker Compose', 'Description': 'Docker Compose enables you to create and distribute multi-container applications. You may specify the services in a YAML file using Compose, and you can spin everything up or take it down with just one command. You may define your application stack in a file while using Compose, which is a major benefit.', 'References': 'Docker (2022) Use Docker Compose, Docker Documentation. Available at: https://docs.docker.com/get-started/08_using_compose/.'},
  {'id': 26, 'Term': 'Declarative Container Management', 'Description': 'Because of the strength and simplicity it provides, declarative management is quickly gaining popularity. Sysadmins no longer have to create elaborate scripts or playbooks to manage containers or keep track of the commands they have run. Instead, all users need to do is specify their desired state in a YAML file, and docker-compose or other tools will assist them in getting there.', 'References': 'Agarwal, G. (2021) MODERN DEVOPS TIPS, TRICKS, AND TECHNIQUES : manage, secure, and enhance software development in... the public cloud with cutting-edge tools and solut. S.L.: Packt Publishing Limited.'},
  {'id': 27, 'Term': 'Container Communication', 'Description': 'In essence, this means that a network connection to a port on a different container will be established by an application running in one container. For instance, a container for a web server might open a port to let it to accept requests on port 80. Alternatively, a database container and an application container might connect.', 'References': 'Donohue, T. (2020) How To Communicate Between Docker Containers, Tutorial Works. Available at: https://www.tutorialworks.com/container-networking/.'},
  {'id': 28, 'Term': 'JSON', 'Description': 'JSON is a text-based format that can be read by machines and by people. It was developed as a replacement for XML, which had previously been the most popular format for data interchange. The purpose for which it was initially created was to facilitate communication between JavaScript clients and back-end servers.', 'References': 'Tyson, M. (2022) What is JSON? A better format for data exchange, InfoWorld. Available at: https://www.infoworld.com/article/3222851/what-is-json-a-better-format-for-data-exchange.html.'},
  {'id': 29, 'Term': 'YAML', 'Description': 'Like XML and JSON, YAML is a human-readable data serialisation language. Through the process of serialisation, data from one application or service that uses various data structures and is developed using several technologies can be sent to another application in a common format.', 'References': 'Lemonaki, D. (2022) What is YAML? The YML File Format, freeCodeCamp.org. Available at: https://www.freecodecamp.org/news/what-is-yaml-the-yml-file-format/#intro (Accessed: 14 August 2023).'},
  {'id': 30, 'Term': 'Azure Storage', 'Description': 'Microsofts cloud storage option for contemporary data storage scenarios is the Azure Storage platform. For a range of data objects, it provides highly available, massively scalable, reliable, and secure cloud storage.', 'References': 'Microsoft (2023b) Introduction to Azure Storage - Cloud storage on Azure, learn.microsoft.com. Available at: https://learn.microsoft.com/en-us/azure/storage/common/storage-introduction.'},
  {'id': 31, 'Term': 'Volumes in Docker', 'Description': "A volume is a persistent storage area used with Docker that is located outside of the container. Data that needs to persist even if the container is stopped or removed can be stored on volumes.", 'References': "Sharma, H. (2023). What is the purpose of VOLUME in Dockerfile. [online] Available at: https://www.tutorialspoint.com/what-is-the-purpose-of-volume-in-dockerfile [Accessed 29 Aug. 2023]." },
  {'id': 32, 'Term': 'Bridge Network in Docker', 'Description': 'A bridge network uses a software bridge which allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network', 'References': 'Docker. (2023). Bridge network driver. [online] Available at: https://docs.docker.com/network/drivers/bridge/#:~:text=In%20terms%20of%20Docker%2C%20a [Accessed 29 Aug. 2023].'},
  {'id': 33, 'Term': 'Overlay Network in Docker', 'Description': 'A distributed network is established across numerous Docker daemon hosts thanks to the overlay network driver. When encryption is enabled, this network sits on top of (overlays) the host-specific networks, enabling communication between linked containers, including swarm service containers, in a secure manner.', 'References': 'Docker Documentation. (2023). Overlay network driver. [online] Available at: https://docs.docker.com/network/drivers/overlay/#:~:text=The%20overlay%20network%20driver%20creates [Accessed 29 Aug. 2023].'},
  {'id': 34, 'Term': 'VLAN in Docker', 'Description': 'VLANs or the equivocal VNI (Virtual Network Identifier) when using the Overlay driver, are the first step in isolating tenant traffic. The Linux sub-interface tagged with a VLAN can either already exist or will be created when you call a docker network create . docker network rm will delete the sub-interface.', 'References': 'Docker Documentation. (2023). IPvlan network driver. [online] Available at: https://docs.docker.com/network/drivers/ipvlan/#:~:text=VLANs%20or%20the%20equivocal%20VNI [Accessed 29 Aug. 2023].'},
  {'id': 35, 'Term': 'Direct Communication (HTTP)', 'Description': 'Direct communication is sometimes called synchronous communication. It is employed to initiate a direct action in a different microservice. Additionally, it can be used to sequentially order a number of microservices behaviors.', 'References': 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, Available at: https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb.'},
  {'id': 36, 'Term': 'Indirect Communication', 'Description': 'Indirect communication is often referred to as asynchronous communication. It makes use of an intermediary (buffer) to store delivered messages so that the recipient (or receivers) can view them later. This clearly distinguishes the sender from the receiver.', 'References': 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, Available at: https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb.'},
  {'id': 37, 'Term': 'RabbitMQ', 'Description': 'To address high-scale, high-availability needs, RabbitMQ can be implemented in distributed and federated topologies. On-premises and in the cloud deployment of RabbitMQ is simple and lightweight. It supports streaming and several message protocols. ', 'References': 'RabbitMQ. (2019). Messaging that just works — RabbitMQ. [online] Available at: https://www.rabbitmq.com/.'},
  {'id': 38, 'Term': 'Queues in RabbitMQ', 'Description': 'RabbitMQ Queues is an ordered data structure that allows you to add(enqueue) at the tail and retrieve(dequeue) from the head. Many messaging protocols and platforms consider publishers and consumers to interact using a queue-like storage method.', 'References': 'Argawal, S, (2022). RabbitMQ Queue Types 101: A Comprehensive Guide to Messaging in RabbitMQ - Learn | Hevo. [online] Available at: https://hevodata.com/learn/rabbitmq-queue-types/#t3 [Accessed 29 Aug. 2023].'},
  {'id': 39, 'Term': 'Control Plane in Kubernetes', 'Description': 'The heart of a Kubernetes cluster is the control plane. It makes certain that each component in the cluster is maintained in the desired condition. It gets information about internal cluster events as well as information from other systems and third-party applications. It then analyses the information and decides what to do.', 'References': 'Olabemiwo, J. (2022). How to Use Kubernetes Control Plane. [online] Available at: https://www.airplane.dev/blog/kubernetes-control-plane [Accessed 29 Aug. 2023].'},
  {'id': 40, 'Term': 'Terraform', 'Description': 'In order to automate numerous infrastructure activities, DevOps teams frequently use the IAC tool Terraform. One of the primary use cases for Terraform is the provisioning of cloud resources.', 'References': 'Harrington. (2022). What is Terraform: Everything You Need to Know | Varonis. [online] Available at: https://www.varonis.com/blog/what-is-terraform.'},
  { 'id': 41, 'Term': 'AWS CodePipeline', 'Description': "It is a continuous delivery solution which allows you to model, visualise, and automate the steps involved in releasing your software. The various phases of a software release process are easily modelled and set up. The procedures needed to regularly release your software modifications are automated using CodePipeline.", 'References': "Amazon (2023). What is AWS CodePipeline? - AWS CodePipeline. [online] docs.aws.amazon.com. Available at: https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html." },
  {'id': 42, 'Term': 'BitBucket', 'Description': 'It provides a central location to manage git repositories, allowing teams to work together on source code, and get development flow instructions. It can be applied to workflow management, access control, pull requests, Jira integration, and full REST API.', 'References': 'Kumar, R. (2022). What is BitBucket and How it works? An Overview and Its Use Cases? [online] DevOpsSchool.com. Available at: https://www.devopsschool.com/blog/what-is-bitbucket-and-how-it-works-an-overview-and-its-use-cases/ [Accessed 12 Sep. 2023].' },
  {'id': 43, 'Term': 'Client ID', 'Description': 'A Client ID is an identifier associated with an application that assists with client / server OAuth 2.0 authentication. Developers create a client ID by defining an application on their developer dashboard.', 'References': 'Deeksha-ramesh (2023). Best Practices for Secure Applications - LinkedIn. [online] learn.microsoft.com. Available at: https://learn.microsoft.com/en-us/linkedin/shared/api-guide/best-practices/secure-applications [Accessed 12 Sep. 2023].'},
  {'id': 44, 'Term': 'Client Secret', 'Description': 'A client secret is a secret known only to the OAuth application and the authorization server. It is generated by the authorization server during the process of application registration.', 'References': 'Cloudentity (2023). OAuth Client Secret Authentication Methods. [online] cloudentity.com. Available at: https://cloudentity.com/developers/basics/oauth-client-authentication/client-secret-authentication/#:~:text=A%20client%20secret%20is%20a [Accessed 12 Sep. 2023].'},
  {'id': 45, 'Term': 'Deployment Pipeline', 'Description': 'It is a set of automated processes and tools that allows developers and operations professionals to collaborate on building and deploying code to a production environment. While a DevOps pipeline can differ by organization, it typically includes build automation/continuous integration, automation testing, validation, and reporting.', 'References': 'Hall, T. (2023). DevOps Pipeline. [online] Atlassian. Available at: https://www.atlassian.com/devops/devops-tools/devops-pipeline.'},
  {'id': 46, 'Term': 'Version Control', 'Description': 'Version control is a technique for monitoring and controlling changes made to digital assets over time. Teams can work on the same project at the same time, in addition to managing changes to the code and files over time. An effective version control system gives you a complete history of your digital assets and promotes faster development and greater collaboration.', 'References': 'Perforce (2023). What is a VCS (Version Control System)? | Version Control Software | Perforce. [online] www.perforce.com. Available at: https://www.perforce.com/blog/vcs/what-is-version-control#what-is-version-control [Accessed 12 Sep. 2023].'},
  {'id': 47, 'Term': 'Security Tests', 'Description': 'The testing of software that identifies system flaws and establishes whether the systems data and resources are secure from potential hackers is known as security testing. It makes sure that the software system and application remain secure and unaffected by any dangers or threats that could result in harm.', 'References': 'Pankaj, P. (2019). Software Testing | Security Testing - GeeksforGeeks. [online] GeeksforGeeks. Available at: https://www.geeksforgeeks.org/software-testing-security-testing/.'},
  {'id': 48, 'Term': 'Regression Tests', 'Description': 'Regression testing is a sort of software testing used to ensure that an application upgrade or recent change has not negatively affected the functionality that are currently in place. A regression test is started by a tester as soon as the developer completes adding a new feature to the application or repairing an existing bug.', 'References': 'Iyengar, P. (2023). Regression Testing Guide: Definition, Strategies, and Mistakes. [online] www.headspin.io. Available at: https://www.headspin.io/blog/regression-testing-a-complete-guide.'},
  {'id': 49, 'Term': 'Integration Test', 'Description': 'It helps find issues that are not obvious by examining the application’s or a specific unit’s implementation. Integration testing discovers defects in the interplay of several application parts. Unlike unit testing, integration testing considers side effects from the beginning.', 'References': 'Schmitt, J. (2021). Unit testing vs integration testing. [online] CircleCI. Available at: https://circleci.com/blog/unit-testing-vs-integration-testing/.'},
  {'id': 50, 'Term': 'Unit Tests', 'Description': 'Unit tests concentrate entirely on one component of an entire application, typically a single class or function. The tested component should ideally have no side effects to make it as simple as possible to isolate and test. Prior to implementation, developers and DevOps specialists write tests in the test-driven development process.', 'References': 'Schmitt, J. (2021). Unit testing vs integration testing. [online] CircleCI. Available at: https://circleci.com/blog/unit-testing-vs-integration-testing/.'},
  
]

/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index', { title: 'Kachis SIT722 Glossary', sub: 'ABC', names: nameList });
});


module.exports = router;
